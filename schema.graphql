####################################
# Chat definitions
####################################

# All items allowed on the dynamoDB
type ChatItem {
  chatId: ID!
  sortKey: String!
  message: String
  messageId: String
  username: String
  chatName: String
  createdAt: String
}

# Chat entry when sort key starts with 'message'
type ChatMessage {
  chatId: ID!
  sortKey: String!
  message: String!
  messageId: String!
  username: String!
  createdAt: String!
}

# Chat entry when sort key starts with 'member'
type ChatMember {
  chatId: ID!
  sortKey: String! #member_<username>
  username: String!
  createdAt: String!
}

interface IChatConfig {
  chatId: ID!
  sortKey: String!
  createdAt: String!
}

# Chat entry when sort key equals 'config'
type ChatGroupConfig implements IChatConfig {
  chatId: ID!
  sortKey: String!
  chatName: String!
  createdAt: String!
}

# Chat entry when sort key equals 'config'
type ChatPrivateConfig implements IChatConfig {
  chatId: ID!
  sortKey: String!
  createdAt: String!
  private: Boolean!
}

union ChatConfig = ChatPrivateConfig | ChatGroupConfig

input ListMessagesInput {
  chatId: String!
  count: Int
  nextToken: String
}

input ListSelfChatMembersInput {
  count: Int
  nextToken: String
}

input CreateMessageInput {
  chatId: String!
  message: String!
  username: String!
}

input CreateChatPrivateInput {
  username: String!
}

input CreateChatGroupWithMembersInput {
  chatName: String!
  usernames: [String]!
}

input PutMembersToChatInput {
  chatId: ID!
  usernames: [String]!
}

input GetChatPrivateInput {
  username: String!
}

input GetChatInput {
  chatId: String!
}

input GetChatsInput {
  chatIds: [ID]!
}

input GetChatMembersInput {
  chatId: String!
  count: Int
  nextToken: String
}

####################################
# User definitions
####################################

# All items allowed on the dynamoDB
type UserItem {
  username: ID!
  sortKey: String!
  lastLogin: String
  email: String
}

# User entry when sort key equals 'config'
type UserSetting {
  username: ID!
  sortKey: String!
  lastLogin: String!
  email: String!
}

input PutUserInput {
  username: String!
  email: String!
}

input GetUserInput {
  username: String!
}

input SearchUsersInput {
  username: String
  count: Int
  nextToken: String
}

####################################
# Query, Mutation and Subscription
####################################

# Define the queries
type Query {
  listMessages(input: ListMessagesInput): [ChatMessage]
  listSelfChatMembers(input: ListSelfChatMembersInput): [ChatMember]
  getChatPrivate(input: GetChatPrivateInput): ChatPrivateConfig
  getChat(input: GetChatInput): ChatConfig
  getChatMembers(input: GetChatMembersInput): [ChatMember]
  getChats(input: GetChatsInput): [ChatConfig]
  getUser(input: GetUserInput): UserSetting
  searchUsers(input: SearchUsersInput): [UserSetting]
}

# Define the mutations
type Mutation {
  createMessage(input: CreateMessageInput): ChatMessage
  createChatPrivate(input: CreateChatPrivateInput): ChatPrivateConfig
  createChatGroupWithMembers(input: CreateChatGroupWithMembersInput): ChatGroupConfig
  putMembersToChat(input: PutMembersToChatInput): [ChatMember]
  putUser(input: PutUserInput): UserSetting
}

type Subscription {
  createdMessage(chatId: String): ChatMessage
  @aws_subscribe(mutations: ["createMessage"])
}

# Define the schema
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}