service: LanguageAppPrototype
frameworkVersion: ">=1.46.0"

# Specifies the cloud provider and runtime details for our serverless implementation
provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-1
  profile: LanguageAppAdmin

plugins:
  - serverless-appsync-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  chatsTableName: ${self:custom.stage}-language-app-chats
  usersTableName: ${self:custom.stage}-language-app-users
  appSync:
    name: LanguageAppPrototypeAppSync    
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: !Ref CognitoUserPool
      # appIdClientRegex: ""
    dataSources:
      - type: AMAZON_DYNAMODB
        name: chatsSource
        config:
          tableName: ${self:custom.chatsTableName}
      - type: AMAZON_DYNAMODB
        name: usersSource
        config:
          tableName: ${self:custom.usersTableName}
      - type: NONE
        name: noneSource
    mappingTemplates:
      - dataSource: chatsSource
        type: Query
        field: listMessages # from the query in schema.graphql
        request: "list_messages/request.vtl"
        response: "list_messages/response.vtl"
      - dataSource: chatsSource
        type: Mutation
        field: createMessage # from the mutation in schema.graphql
        request: "create_message/request.vtl"
        response: "create_message/response.vtl"
      - dataSource: noneSource
        type: Subscription
        field: createdMessage # from the subscription in schema.graphql
        request: "get_created_message/request.vtl"
        response: "get_created_message/response.vtl"
      - dataSource: chatsSource
        type: Mutation
        field: createChat # from the mutation in schema.graphql
        request: "create_chat/request.vtl"
        response: "create_chat/response.vtl"
      - dataSource: chatsSource
        type: Query
        field: listChats # from the query in schema.graphql
        request: "list_chats/request.vtl"
        response: "list_chats/response.vtl"
      - dataSource: usersSource
        type: Mutation
        field: putUser # from the mutation in schema.graphql
        request: "put_user/request.vtl"
        response: "put_user/response.vtl"
      - dataSource: usersSource
        type: Query
        field: searchUsers # from the query in schema.graphql
        request: "search_users/request.vtl"
        response: "search_users/response.vtl"
    substitutions:
      chatsTableName: "${self:custom.chatsTableName}"
      usersTableName: "${self:custom.usersTableName}"

# AWS CloudFormation configuration
resources:
  - ${file(resources/cognito.yaml)}
  - ${file(resources/dynamodb-tables.yaml)}